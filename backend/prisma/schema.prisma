generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId             Int                      @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String                   @unique
  passwordHash       String
  registeredAt       DateTime                 @default(now())
  status             String                   @default("active")
  attempts           Attempt[]
  diagnostics        Diagnostic[]
  enrollments        Enrollment[]
  submissions        Submission[]
  progresses         TopicProgress[]
  roles              UserRole[]
  UserPermission     UserPermission[]
  isVerified         Boolean                  @default(false)
  emailVerifiedAt    DateTime?
  verificationTokens EmailVerificationToken[]

  googleId     String? @unique
  profileImage String? // URL de la imagen del perfil (de Google)
}

model Role {
  roleId         Int              @id @default(autoincrement())
  name           String           @unique
  description    String?
  users          UserRole[]
  RolePermission RolePermission[]
}

model UserRole {
  userId     Int
  roleId     Int
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [roleId])
  user       User     @relation(fields: [userId], references: [userId])

  @@id([userId, roleId])
}

model RolePermission {
  roleId     Int
  permission String
  assignedAt DateTime @default(now())
  role       Role     @relation(fields: [roleId], references: [roleId])

  @@id([roleId, permission])
}

model UserPermission {
  userId     Int
  permission String
  assignedAt DateTime @default(now())

  user User @relation(fields: [userId], references: [userId])

  @@id([userId, permission])
}

model Course {
  courseId    Int          @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime?
  status      String       @default("active")
  diagnostics Diagnostic[]
  enrollments Enrollment[]
  modules     Module[]
}

model Enrollment {
  enrollmentId Int      @id @default(autoincrement())
  userId       Int
  courseId     Int
  enrolledAt   DateTime @default(now())
  status       String   @default("active")
  course       Course   @relation(fields: [courseId], references: [courseId])
  user         User     @relation(fields: [userId], references: [userId])
}

model Module {
  moduleId    Int     @id @default(autoincrement())
  courseId    Int
  title       String
  description String?
  order       Int
  course      Course  @relation(fields: [courseId], references: [courseId])
  topics      Topic[]
}

model Topic {
  topicId     Int             @id @default(autoincrement())
  moduleId    Int
  title       String
  description String?
  order       Int
  exercises   Exercise[]
  media       MediaAsset[]
  submissions Submission[]
  module      Module          @relation(fields: [moduleId], references: [moduleId])
  progresses  TopicProgress[]
}

model MediaAsset {
  mediaId     Int     @id @default(autoincrement())
  topicId     Int
  type        String
  url         String
  description String?
  topic       Topic   @relation(fields: [topicId], references: [topicId])
}

model Exercise {
  exerciseId      Int       @id @default(autoincrement())
  topicId         Int
  statement       String
  type            String
  difficultyLevel String?
  correctAnswer   String?
  attempts        Attempt[]
  topic           Topic     @relation(fields: [topicId], references: [topicId])
}

model Attempt {
  attemptId     Int      @id @default(autoincrement())
  userId        Int
  exerciseId    Int
  attemptedAt   DateTime @default(now())
  answer        String?
  result        String?
  scoreObtained Int?
  exercise      Exercise @relation(fields: [exerciseId], references: [exerciseId])
  user          User     @relation(fields: [userId], references: [userId])
}

model Submission {
  submissionId Int      @id @default(autoincrement())
  userId       Int
  topicId      Int
  submittedAt  DateTime @default(now())
  fileUrl      String?
  grade        Int?
  feedback     String?
  topic        Topic    @relation(fields: [topicId], references: [topicId])
  user         User     @relation(fields: [userId], references: [userId])
}

model TopicProgress {
  progressId      Int       @id @default(autoincrement())
  userId          Int
  topicId         Int
  status          String    @default("not_started")
  startedAt       DateTime  @default(now())
  completedAt     DateTime?
  progressPercent Int       @default(0)
  topic           Topic     @relation(fields: [topicId], references: [topicId])
  user            User      @relation(fields: [userId], references: [userId])
}

model Diagnostic {
  diagnosticId     Int      @id @default(autoincrement())
  userId           Int
  courseId         Int
  takenAt          DateTime @default(now())
  score            Int?
  recommendedLevel String?
  course           Course   @relation(fields: [courseId], references: [courseId])
  user             User     @relation(fields: [userId], references: [userId])
}

model EmailVerificationToken {
  tokenId   Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  tokenHash String
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([tokenHash])
  @@index([userId, used, expiresAt])
}
